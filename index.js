const TelegramBot = require('node-telegram-bot-api');
const keys = require('./src/keys');
const keyboards = require('./src/keyboards');
const adv_Users = require('./src/models/User');
const mongoose = require('mongoose');
const bot = new TelegramBot(keys.TOKEN, { polling: true });
const groups = require('./src/read_files/read');

let newUsers = 0;

let cinema_added = 0;
let listen_added = 0;
let read_added = 0;
let entertainment_added = 0;
let vine_added = 0;

let cinema_given = 0;
let listen_given = 0;
let read_given = 0;
let entertainment_given = 0;
let vine_given = 0;

async function sendReview() {
    bot.sendMessage(keys.adm, `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${await adv_Users.estimatedDocumentCount()}\n–ò–∑ –Ω–∏—Ö –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${newUsers}\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º (—Å–æ–≤–µ—Ç–æ–≤ –¥–∞–Ω–æ/—Å–æ–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ):\nüé¨ –ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å - ${cinema_added}/${cinema_given}\nüé∏ –ß—Ç–æ –ø–æ—Å–ª—É—à–∞—Ç—å - ${listen_added}/${listen_given}\nüìö –ß—Ç–æ –ø–æ—á–∏—Ç–∞—Ç—å - ${read_added}/${read_given}\nüçπ –ß—Ç–æ –≤—ã–ø–∏—Ç—å - ${vine_added}/${vine_given}\nüòè –ß–µ–º –∑–∞–Ω—è—Ç—å—Å—è - ${entertainment_added}/${entertainment_given}\n`);
    newUsers = 0;

    cinema_added = 0;
    listen_added = 0;
    read_added = 0;
    entertainment_added = 0;
    vine_added = 0;

    cinema_given = 0;
    listen_given = 0;
    read_given = 0;
    entertainment_given = 0;
    vine_given = 0;
}

setInterval(() => { sendReview(); }, 86400000);


mongoose.connect(keys.uri, {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
    .then(() => {
        console.log("MongoDB connected");
    })
    .catch(err => console.log("Error: MongoDB connection failed"));

function makeCounter() {
    var currentCount = 1;

    return function () {
        return currentCount++;
    };
}

let counter = makeCounter();

class adv_Users_API {
    static async getStateById(user_id) {
        let user = await (adv_Users.findOne({ id: user_id }));
        return user.state;
    }
    static createUser(user_id) {
        adv_Users.findOne({ id: user_id }, async (err, user) => {
            if (user === null) {
                const User = new adv_Users({ 'id': user_id });
                await User.save();
                ++newUsers;
            }
            else {
                await adv_Users.updateOne({ 'id': user_id }, { state: 'start' });
            }
        });
    }
    static changeUserState(user_id, newState) {
        adv_Users.findOne({ id: user_id }, async (err, user) => {
            console.log(err);
            if (user === null) {
                const User = new adv_Users({ id: user_id, state: newState });
                await User.save();
            }
            else {
                await adv_Users.updateOne({ id: user_id }, { state: newState });
            }
        });
    }
    static async getUserOldAdvice(user_id, advice_key) {
        let user = await (adv_Users.findOne({ id: user_id }));
        return user[advice_key];
    }
    static async getUserNewAdvice(user_id, gr_number) {
        let advice_keys = ['adv1', 'adv2', 'adv3', 'adv4', 'adv5'];
        let advice_key = advice_keys[gr_number - 1];
        let old_value = await this.getUserOldAdvice(user_id, advice_key);
        switch (gr_number) {
            case 1:
                cinema_given++;
                break;
            case 2:
                listen_given++;
                break;
            case 3:
                read_given++;
                break;
            case 4:
                entertainment_given++;
                break;
            case 5:
                vine_given++;
                break;
        }
        let new_value = groups.get_advice(gr_number);
        while (new_value == old_value)
            new_value = groups.get_advice(gr_number);
        await adv_Users.updateOne({ id: user_id }, { [advice_key]: new_value });
        return (new_value);
    }
    static async createAdvice(user_id, gr_number, voice_msg_id) {
        let id_string = String(user_id) + String(counter());
        let groups_array = [
            'üé¨ –ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'üé∏ –ß—Ç–æ –ø–æ—Å–ª—É—à–∞—Ç—å', 'üìö –ß—Ç–æ –ø–æ—á–∏—Ç–∞—Ç—å', 'üòè –ß–µ–º –∑–∞–Ω—è—Ç—å—Å—è', 'üçπ –ß—Ç–æ –≤—ã–ø–∏—Ç—å',
        ];
        switch (gr_number) {
            case 1:
                cinema_added++;
                break;
            case 2:
                listen_added++;
                break;
            case 3:
                read_added++;
                break;
            case 4:
                entertainment_added++;
                break;
            case 5:
                vine_added++;
                break;
        }
        let listener = async (query) => {
            let data = JSON.parse(query.data);
            switch (data.type) {
                case id_string + 'yes':
                    console.log(gr_number + ' ' + voice_msg_id);
                    groups.add_advice(gr_number, voice_msg_id)
                    await bot.sendMessage(keys.adm, `–°–æ–≤–µ—Ç "${voice_msg_id}" –¥–ª—è –≥—Ä—É–ø–ø—ã "${groups_array[gr_number - 1]}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`);
                    bot.off('callback_query', listener);
                    break;
                case id_string + 'no':
                    await bot.sendMessage(keys.adm, `–°–æ–≤–µ—Ç "${voice_msg_id}" –¥–ª—è –≥—Ä—É–ø–ø—ã "${groups_array[gr_number - 1]}" –æ—Ç–∫–ª–æ–Ω–µ–Ω`);
                    bot.off('callback_query', listener);
                    break;
            };
        };
        bot.on('callback_query', listener);
        await bot.sendMessage(keys.adm, `–î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç "${voice_msg_id}" –¥–ª—è –≥—Ä—É–ø–ø—ã "${groups_array[gr_number - 1]}"?`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç',
                            callback_data: JSON.stringify({
                                type: `${id_string}yes`,
                            })
                        },
                    ],
                    [
                        {
                            text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–æ–≤–µ—Ç',
                            callback_data: JSON.stringify({
                                type: `${id_string}no`,
                            })
                        },
                    ]
                ]
            }
        });
        await bot.sendVoice(keys.adm, voice_msg_id);
    }
}

bot.on('message', async msg => {
    let state = await adv_Users_API.getStateById(msg.chat.id);;
    switch (msg.text) {
        case '/start':
            break;
        case 'üì¢ –î–∞—Ç—å —Å–æ–≤–µ—Ç':
            if (state == 'main') {
                adv_Users_API.changeUserState(msg.chat.id, '1');
                await bot.sendMessage(msg.chat.id, '–ß—Ç–æ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –±—É–¥–µ–º? ü§î', keyboards.screen_1);
            }
            break;
        case 'üß† –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç':
            if (state == 'main') {
                adv_Users_API.changeUserState(msg.chat.id, '2');
                await bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá', keyboards.screen_2);
            }
            break;
        case 'üëà –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            if (state != 'start' && state != 'main') {
                adv_Users_API.changeUserState(msg.chat.id, 'main');
                let hello = '–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏–ª–∏ –¥–∞—Ç—å —Å–≤–æ–π —Å–æ–≤–µ—Ç –∫–æ–ª–ª–µ–≥–∞–º –ø–æ –Ω–µ—Å—á–∞—Å—Ç—å—é?'
                bot.sendMessage(msg.chat.id, hello, keyboards.mainScreen);
            }
            break;
        case 'üöÄ –ü–æ–µ—Ö–∞–ª–∏!':
            if (state == 'start') {
                adv_Users_API.changeUserState(msg.chat.id, 'main');
                let hello = '–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏–ª–∏ –¥–∞—Ç—å —Å–≤–æ–π —Å–æ–≤–µ—Ç –∫–æ–ª–ª–µ–≥–∞–º –ø–æ –Ω–µ—Å—á–∞—Å—Ç—å—é?'
                bot.sendMessage(msg.chat.id, hello, keyboards.mainScreen);
            }
        case '‚úã –î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è':
            if (state == '1_1' || state == '1_2' || state == '1_3' || state == '1_4' || state == '1_5' || state == '1_5_1' || state == '1_1_1' || state == '1_2_1' || state == '1_3_1' || state == '1_4_1') {
                // adv_Users_API.changeUserState(msg.chat.id, '1');
                // await bot.sendMessage(msg.chat.id, '–ß—Ç–æ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –±—É–¥–µ–º? ü§î', keyboards.screen_1);
            }
            else if (state == '2_1' || state == '2_2' || state == '2_3' || state == '2_4' || state == '2_5_1') {
                adv_Users_API.changeUserState(msg.chat.id, '2');
                await bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá', keyboards.screen_2);
            }
            break;
        case 'üß† –•–æ—á—É –µ—â—ë —Å–æ–≤–µ—Ç':
            if (state == '2_1') {
                await bot.sendMessage(msg.chat.id, '–¢–≤–æ–π –ö–∏–Ω–æ—Å–æ–≤–µ—Ç üëá\n\n–ü—Ä–æ—Å–ª—É—à–∞–π –∞—É–¥–∏–æ üéß');
                await bot.sendVoice(msg.chat.id, await adv_Users_API.getUserNewAdvice(msg.chat.id, 1), keyboards.line_keyboard_3);
            }
            else if (state == '2_2') {
                await bot.sendMessage(msg.chat.id, '–¢–≤–æ–π –ú—É–∑—Å–æ–≤–µ—Ç üëá\n\n–ü—Ä–æ—Å–ª—É—à–∞–π –∞—É–¥–∏–æ üéß');
                await bot.sendVoice(msg.chat.id, await adv_Users_API.getUserNewAdvice(msg.chat.id, 2), keyboards.line_keyboard_3);
            }
            else if (state == '2_3') {
                await bot.sendMessage(msg.chat.id, '–¢–≤–æ–π –ö–Ω–∏–≥–æ—Å–æ–≤–µ—Ç üëá\n\n–ü—Ä–æ—Å–ª—É—à–∞–π –∞—É–¥–∏–æ üéß');
                await bot.sendVoice(msg.chat.id, await adv_Users_API.getUserNewAdvice(msg.chat.id, 3), keyboards.line_keyboard_3);
            }
            else if (state == '2_4') {
                await bot.sendMessage(msg.chat.id, '–¢–≤–æ–π –§–∏–∑—Å–æ–≤–µ—Ç üëá\n\n–ü—Ä–æ—Å–ª—É—à–∞–π –∞—É–¥–∏–æ üéß');
                await bot.sendVoice(msg.chat.id, await adv_Users_API.getUserNewAdvice(msg.chat.id, 4), keyboards.line_keyboard_3);
            }
            else if (state == '2_5_1') {
                await bot.sendMessage(msg.chat.id, '–¢–≤–æ–π –ê–ª–∫–æ—Å–æ–≤–µ—Ç üëá\n\n–ü—Ä–æ—Å–ª—É—à–∞–π –∞—É–¥–∏–æ üéß');
                await bot.sendMessage(msg.chat.id, '–ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –≤—Ä–µ–¥–∏—Ç –≤–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é');
                await bot.sendVoice(msg.chat.id, await adv_Users_API.getUserNewAdvice(msg.chat.id, 5), keyboards.line_keyboard_3);
            }
            break;
        case 'üì¢ –•–æ—á—É –¥–∞—Ç—å –µ—â–µ —Å–æ–≤–µ—Ç':
            if (state == '1_1_1') {
                adv_Users_API.changeUserState(msg.chat.id, '1_1');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –¥–ª—è –º–µ–Ω—è –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á—Ç–æ —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            else if (state == '1_2_1') {
                adv_Users_API.changeUserState(msg.chat.id, '1_2');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –º–Ω–µ –∞—É–¥–∏–æ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á—Ç–æ —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            else if (state == '1_3_1') {
                adv_Users_API.changeUserState(msg.chat.id, '1_3');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –º–Ω–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á—Ç–æ —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            else if (state == '1_4_1') {
                adv_Users_API.changeUserState(msg.chat.id, '1_4');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –º–Ω–µ –∞—É–¥–∏–æ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á–µ–º —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            else if (state == '1_5_1') {
                adv_Users_API.changeUserState(msg.chat.id, '1_5');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –º–Ω–µ –∞—É–¥–∏–æ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á—Ç–æ —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –≤—ã–ø–∏—Ç—å –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            break;
        case 'üé¨ –ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
            if (state == '1') {
                adv_Users_API.changeUserState(msg.chat.id, '1_1');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –¥–ª—è –º–µ–Ω—è –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á—Ç–æ —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            else if (state == '2') {
                adv_Users_API.changeUserState(msg.chat.id, '2_1');
                await bot.sendMessage(msg.chat.id, '–¢–≤–æ–π –ö–∏–Ω–æ—Å–æ–≤–µ—Ç üëá\n\n–ü—Ä–æ—Å–ª—É—à–∞–π –∞—É–¥–∏–æ üéß');
                await bot.sendVoice(msg.chat.id, await adv_Users_API.getUserNewAdvice(msg.chat.id, 1), keyboards.line_keyboard_3);
            }
            break;
        case 'üé∏ –ß—Ç–æ –ø–æ—Å–ª—É—à–∞—Ç—å':
            if (state == '1') {
                adv_Users_API.changeUserState(msg.chat.id, '1_2');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –º–Ω–µ –∞—É–¥–∏–æ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á—Ç–æ —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            else if (state == '2') {
                adv_Users_API.changeUserState(msg.chat.id, '2_2');
                await bot.sendMessage(msg.chat.id, '–¢–≤–æ–π –ú—É–∑—Å–æ–≤–µ—Ç üëá\n\n–ü—Ä–æ—Å–ª—É—à–∞–π –∞—É–¥–∏–æ üéß');
                await bot.sendVoice(msg.chat.id, await adv_Users_API.getUserNewAdvice(msg.chat.id, 2), keyboards.line_keyboard_3);
            }
            break;
        case 'üìö –ß—Ç–æ –ø–æ—á–∏—Ç–∞—Ç—å':
            if (state == '1') {
                adv_Users_API.changeUserState(msg.chat.id, '1_3');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –º–Ω–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á—Ç–æ —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            else if (state == '2') {
                adv_Users_API.changeUserState(msg.chat.id, '2_3');
                await bot.sendMessage(msg.chat.id, '–¢–≤–æ–π –ö–Ω–∏–≥–æ—Å–æ–≤–µ—Ç üëá\n\n–ü—Ä–æ—Å–ª—É—à–∞–π –∞—É–¥–∏–æ üéß');
                await bot.sendVoice(msg.chat.id, await adv_Users_API.getUserNewAdvice(msg.chat.id, 3), keyboards.line_keyboard_3);
            }
            break;
        case 'üòè –ß–µ–º –∑–∞–Ω—è—Ç—å—Å—è':
            if (state == '1') {
                adv_Users_API.changeUserState(msg.chat.id, '1_4');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –º–Ω–µ –∞—É–¥–∏–æ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á–µ–º —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            else if (state == '2') {
                adv_Users_API.changeUserState(msg.chat.id, '2_4');
                await bot.sendMessage(msg.chat.id, '–¢–≤–æ–π –§–∏–∑—Å–æ–≤–µ—Ç üëá\n\n–ü—Ä–æ—Å–ª—É—à–∞–π –∞—É–¥–∏–æ üéß');
                await bot.sendVoice(msg.chat.id, await adv_Users_API.getUserNewAdvice(msg.chat.id, 4), keyboards.line_keyboard_3);
            }
            break;
        case 'üçπ –ß—Ç–æ –≤—ã–ø–∏—Ç—å':
            if (state == '1') {
                adv_Users_API.changeUserState(msg.chat.id, '1_5');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –º–Ω–µ –∞—É–¥–∏–æ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á—Ç–æ —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –≤—ã–ø–∏—Ç—å –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            else if (state == '2') {
                adv_Users_API.changeUserState(msg.chat.id, '2_5');
                await bot.sendMessage(msg.chat.id, '–•–æ—Ä–æ—à–æ. –ê —Ç–µ–±–µ —É–∂–µ –µ—Å—Ç—å 18? ü•É', keyboards.eighteen_check_keyboard);
            }
            break;
        case '‚úîÔ∏è –ö–æ–Ω–µ—á–Ω–æ!':
            if (state == '2_5') {
                adv_Users_API.changeUserState(msg.chat.id, '2_5_1');
                await bot.sendMessage(msg.chat.id, '–¢–≤–æ–π –ê–ª–∫–æ—Å–æ–≤–µ—Ç üëá\n\n–ü—Ä–æ—Å–ª—É—à–∞–π –∞—É–¥–∏–æ üéß');
                await bot.sendMessage(msg.chat.id, '–ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –≤—Ä–µ–¥–∏—Ç –≤–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é');
                await bot.sendVoice(msg.chat.id, await adv_Users_API.getUserNewAdvice(msg.chat.id, 5), keyboards.line_keyboard_3);
            }
            break;
        case '‚ùå –ï—â—ë –Ω–µ—Ç, –¥—è–¥–µ–Ω—å–∫–∞':
            if (state == '2_5') {
                adv_Users_API.changeUserState(msg.chat.id, '2');
                await bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá', keyboards.screen_2);
            }
            break;
        case 'üé§ –î–∞–≤–∞–π':
            if (state == 'no_voice_1') {
                adv_Users_API.changeUserState(msg.chat.id, '1_1');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –¥–ª—è –º–µ–Ω—è –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á—Ç–æ —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            else if (state == 'no_voice_2') {
                adv_Users_API.changeUserState(msg.chat.id, '1_2');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –º–Ω–µ –∞—É–¥–∏–æ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á—Ç–æ —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            else if (state == 'no_voice_3') {
                adv_Users_API.changeUserState(msg.chat.id, '1_3');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –º–Ω–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á—Ç–æ —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            else if (state == 'no_voice_4') {
                adv_Users_API.changeUserState(msg.chat.id, '1_4');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –º–Ω–µ –∞—É–¥–∏–æ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á–µ–º —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            else if (state == 'no_voice_5') {
                adv_Users_API.changeUserState(msg.chat.id, '1_5');
                await bot.sendMessage(msg.chat.id, '–ó–∞–ø–∏—à–∏ –º–Ω–µ –∞—É–¥–∏–æ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≤ –Ω—ë–º, —á—Ç–æ —Ç—ã —Å–æ–≤–µ—Ç—É–µ—à—å –≤—ã–ø–∏—Ç—å –∏ –ø–æ—á–µ–º—É üëá', keyboards.line_keyboard_2);
            }
            break;
        default:
            console.log(msg.voice);
            if (!msg.voice) {
                if (state == '1_1') {
                    adv_Users_API.changeUserState(msg.chat.id, 'no_voice_1');
                    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç —Ç–µ–±—è –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë —Ä–∞–∑?', keyboards.no_voice);
                }
                else if (state == '1_2') {
                    adv_Users_API.changeUserState(msg.chat.id, 'no_voice_2');
                    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç —Ç–µ–±—è –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë —Ä–∞–∑?', keyboards.no_voice);
                }
                else if (state == '1_3') {
                    adv_Users_API.changeUserState(msg.chat.id, 'no_voice_3');
                    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç —Ç–µ–±—è –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë —Ä–∞–∑?', keyboards.no_voice);
                }
                else if (state == '1_4') {
                    adv_Users_API.changeUserState(msg.chat.id, 'no_voice_4');
                    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç —Ç–µ–±—è –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë —Ä–∞–∑?', keyboards.no_voice);
                }
                else if (state == '1_5') {
                    adv_Users_API.changeUserState(msg.chat.id, 'no_voice_5');
                    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç —Ç–µ–±—è –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë —Ä–∞–∑?', keyboards.no_voice);
                }
            }
            break;
    }
})

bot.onText(/\/start/, msg => {
    let hello = '–ü—Ä–∏–≤–µ—Ç, ' + msg.from.first_name + ', —è –±–æ—Ç –∫–∞—Ä–∞–Ω—Ç–∏–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π! üò∑\n\n–°–∫—É—á–∞–µ—à—å –¥–æ–º–∞ –Ω–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ? –¢–æ–≥–¥–∞ –º–Ω–µ –Ω—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ —Ç—ã! –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç ‚Äî —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –ø–æ—á–∏—Ç–∞—Ç—å, —á—Ç–æ –ø–æ—Å–ª—É—à–∞—Ç—å –∏–ª–∏ —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è –≤ –ø–µ—Ä–µ—Ä—ã–≤–µ –º–µ–∂–¥—É –∏–º–µ–π–ª–∞–º–∏, —á–∞—Ç–∞–º–∏, –∫–æ–Ω—Ñ-–∫–æ–ª–ª–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –æ—á–µ–Ω—å-–æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–º–∏ —Ä–∞–±–æ—á–∏–º–∏ –¥–µ–ª–∞–º–∏.\n\n–£–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, –ø—Ä–æ—á–∏—Ç–∞–ª –∏–ª–∏ –ø–æ—Å–ª—É—à–∞–ª —á—Ç–æ-—Ç–æ –æ—Ñ–∏–≥–µ–Ω–Ω–æ–µ? –Ø —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–∏–º—É –¢–í–û–ô —Å–æ–≤–µ—Ç. –ü—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–∏ –º–Ω–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ –æ–Ω–æ –ø–æ–ø–∞–¥—ë—Ç –≤ –º–æ—é –±–∞–∑—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n';
    hello += '\n–ñ–º–∏ ¬´–ü–æ–µ—Ö–∞–ª–∏¬ª –∏ –Ω–∞—á–Ω—ë–º!';
    bot.sendMessage(msg.chat.id, hello, keyboards.start_keyboard_1);
    adv_Users_API.createUser(msg.chat.id);
});


bot.on('voice', async msg => {
    console.log(msg);
    let state = await adv_Users_API.getStateById(msg.chat.id);;
    if (state == '1_1') {
        adv_Users_API.changeUserState(msg.chat.id, '1_1_1');
        adv_Users_API.createAdvice(msg.chat.id, 1, msg.voice.file_id);
        await bot.sendMessage(msg.chat.id, '–°–ø–∞—Å–∏–±–æ! –°–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –º–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é, –∏ —Ç–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ª—é–¥–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ üåç\n\n–ü–æ–≤—Ç–æ—Ä–∏–º? ', keyboards.on_voice_keyboard);
    }
    else if (state == '1_2') {
        adv_Users_API.changeUserState(msg.chat.id, '1_2_1');
        adv_Users_API.createAdvice(msg.chat.id, 2, msg.voice.file_id);
        await bot.sendMessage(msg.chat.id, '–°–ø–∞—Å–∏–±–æ! –°–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –º–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é, –∏ —Ç–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ª—é–¥–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ üåç\n\n–ü–æ–≤—Ç–æ—Ä–∏–º? ', keyboards.on_voice_keyboard);
    }
    else if (state == '1_3') {
        adv_Users_API.changeUserState(msg.chat.id, '1_3_1');
        adv_Users_API.createAdvice(msg.chat.id, 3, msg.voice.file_id);
        await bot.sendMessage(msg.chat.id, '–°–ø–∞—Å–∏–±–æ! –°–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –º–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é, –∏ —Ç–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ª—é–¥–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ üåç\n\n–ü–æ–≤—Ç–æ—Ä–∏–º? ', keyboards.on_voice_keyboard);
    }
    else if (state == '1_4') {
        adv_Users_API.changeUserState(msg.chat.id, '1_4_1');
        adv_Users_API.createAdvice(msg.chat.id, 4, msg.voice.file_id);
        await bot.sendMessage(msg.chat.id, '–°–ø–∞—Å–∏–±–æ! –°–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –º–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é, –∏ —Ç–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ª—é–¥–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ üåç\n\n–ü–æ–≤—Ç–æ—Ä–∏–º? ', keyboards.on_voice_keyboard);
    }
    else if (state == '1_5') {
        adv_Users_API.changeUserState(msg.chat.id, '1_5_1');
        adv_Users_API.createAdvice(msg.chat.id, 5, msg.voice.file_id);
        await bot.sendMessage(msg.chat.id, '–°–ø–∞—Å–∏–±–æ! –°–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –º–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é, –∏ —Ç–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ª—é–¥–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ üåç\n\n–ü–æ–≤—Ç–æ—Ä–∏–º? ', keyboards.on_voice_keyboard);
    }
});